// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Region{
  id String @id @default(uuid())
  name String @unique
  restaurants Restaurant[]
}

model Restaurant{
  id String @id @default(uuid())
  name String
  adress String
  phone String
  tip Int
  regions Region @relation(fields: [regionId], references: [id])
  regionId String
  users User[]
  categories Category[]
  products Product[]
  orders Order[]
  debts Debt[]
  withdraws Withdraw[]
}

model User{
  id String @id @default(uuid())
  name String
  phone String 
  password String
  role UserRole
  restaurants Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
  balance Int @default(0)
  orders Order[]
}

model Category{
  id String @id @default(uuid())
  name String
  restaurants Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
  isActive Boolean
  products Product[]
}

model Product{
  id String @id @default(uuid())
  name String
  price Int
  categories Category @relation(fields: [categoryId], references: [id])
  categoryId String
  restaurants Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
  isActive Boolean
  orderitems OrderItems[]
} 


model Order{
  id String @id @default(uuid())
  restaurants Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
  waiters User @relation(fields: [waiterId], references: [id])
  waiterId String
  status Boolean
  table String
  orderitems OrderItems[]
  debts Debt[]
  withdraws Withdraw[]
}

model OrderItems{
  id String @id @default(uuid())
  products Product @relation(fields: [productId], references: [id])
  productId String
  quantity Int
  orders Order @relation(fields: [orderId], references: [id])
  orderId String
}

model Debt{
  id String @id @default(uuid())
  orders Order @relation(fields: [orderId], references: [id])
  orderId String
  amount Int
  client String
  restaurants Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
}

model Withdraw{
  id String @id @default(uuid())
  type Type
  orders Order? @relation(fields: [orderId], references: [id])
  orderId String?
  price Int
  restaurants Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
}

enum Type{
  KIRISH
  CHIQISH
}


enum UserRole{
  ADMIN
  SUPER_ADMIN
  OWNER
  CASHER
  WAITER
}